---
# Erstellen des private-key
# - name: "Private Key für Server-Zertifikat erstellen"
#   raw: "/usr/bin/openssl genpkey -algorithm RSA -out {{ dir_new_ssl_certs }}{{ server_cert.server_key_name }} -aes256"

# Erstellen des csr
# - name: "SSL-Zertifikats-Request (CSR) für Server-Zertifikat erstellen"
#   raw: "/usr/bin/openssl req -x509 -new -key {{ dir_new_ssl_certs }}{{server_cert.server_key_name}} -out {{ dir_new_ssl_certs }}{{server_cert.server_csr_name}} -days 3650 -subj \"/C=DE/ST=Hessen/L=Wiesbasen/OU=KBS/CN=serverLA\""

- name: "SSL-Zertifikats-Request (CSR) für Server-Zertifikat erstellen"
  raw: "/usr/bin/openssl req -newkey rsa:2048 -keyout {{ dir_new_ssl_certs }}{{server_cert.server_key_name}} -out {{ dir_new_ssl_certs }}{{server_cert.server_csr_name}} -days {{ days.server_crt }} -subj \"{{organization.server}}\" -reqexts SAN -config <(cat /root/certificates/demo-CA/rootca/cnf/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS.1:{{server_dns_alt_names.dns1}},DNS.2:{{server_dns_alt_names.dns2}}\"))"

# CSR von RootCA signieren (Zertifikat ausstellen)
- name: "SSL-Zertifikats-Request (CSR) signieren und SSL-Zertifikat ausstellen"
  raw: "openssl x509 -req -in {{ dir_new_ssl_certs }}{{server_cert.server_csr_name}} -CA {{ dir_rootca }}{{rootca.default_rootca_crt_name}} -CAkey {{ dir_rootca }}{{rootca.default_rootca_key_name}} -CAcreateserial -out {{ dir_new_ssl_certs }}{{server_cert.server_crt_name}} -days {{ days.server_crt }} -extensions server_cert -extfile <(printf \"[server_cert]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n[ alt_names ]\n DNS.1={{server_dns_alt_names.dns1}}\nDNS.2={{server_dns_alt_names.dns2}}\")"

